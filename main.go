package main

import (
	"fmt"
	"net/http"

	"github.com/airdb/sailor/deployutil"
	"github.com/airdb/sailor/faas"
	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
	"github.com/go-chi/render"

	_ "github.com/swaggo/http-swagger/example/go-chi/docs" // docs is generated by Swag CLI, you have to import it.
)

// //go:generate swagger generate server --quiet --target server --name hello-api --spec swagger.yml --exclude-main
//go:generate swag init

// @title Swagger Example API
// @version 1.0
// @description This is a sample server Petstore server.
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host petstore.swagger.io
// @BasePath /v2
func main() {
	r := chi.NewRouter()
	r.Use(middleware.Logger)
	r.Use(render.SetContentType(render.ContentTypeHTML))

	r.Get("/test/chi", func(w http.ResponseWriter, r *http.Request) {
		w.Write([]byte("welcome1"))
		w.WriteHeader(http.StatusOK)
	})
	r.Get("/chi", func(w http.ResponseWriter, r *http.Request) {
		w.Write([]byte("welcome"))
		w.WriteHeader(http.StatusOK)
	})

	r.Get("/chi/hello", RootHandler)

	fmt.Println("hello", deployutil.GetDeployStage())
	fs := http.FileServer(http.Dir("docs"))
	r.Handle("/chi/docs/*", http.StripPrefix("/chi/docs/", fs))
	r.Handle("/docs/*", http.StripPrefix("/docs/", fs))

	faas.RunTencentChi(r)
}

// RootHandler - Returns all the available APIs
// @Summary This API can be used as health check for this application.
// @Description Tells if the chi-swagger APIs are working or not.
// @Tags chi-swagger
// @Accept  json
// @Produce  json
// @Success 200 {string} response "api response"
// @Router / [get]
func RootHandler(w http.ResponseWriter, r *http.Request) {
	w.Write([]byte("welcome hello"))
	w.WriteHeader(http.StatusOK)
}
